import Head from "next/head";
import { unstable_getServerSession } from "next-auth";
import { authOptions } from "/pages/api/auth/[...nextauth]";
import Header from "components/Header";
import Menu from "components/Menu";
import Section from "components/Section";
import useSections from "hooks/useSections";
import { useState } from "react";

export default function List({ list }) {
  const { sections, loading, addSection } = useSections(list.id, list.sections);
  const [openSection, setOpenSection] = useState("");
  
  const handleAddSection = () => {
    addSection({ name: "New section", color: "" })
  }
  
  return (
    <>
      <Head>
        <title>Verdel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <div className="min-h-screen inline-flex w-full justify-center">
        <Menu />
        <main className="w-full bg-gray-200 dark:bg-gray-900">
        <Header {...list} />
          <button 
            className="h-10 w-80 bg-trasparent block rounded-lg flex-1 mx-auto my-5 outline outline-offset-2 outline-orange-600 text-lg font-bold font-mono hover:bg-gray-800"
            onClick={handleAddSection}
          >
            <p className="text-white">Nueva seccion</p>
          </button>
          {loading ? (
            <div>loading..</div>
          ) : (
            sections?.map((section) => (
              <Section
                key={section.id}
                section={section}
                openSection={openSection}
                setOpenSection={setOpenSection}
              />
            ))
          )}
        </main>
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );
  if (!session) {
    return {
      redirect: {
        destination: "/login",
      },
    };
  }
  const { listId } = context.query;
  const res = await fetch(`http://localhost:3000/api/lists/${listId}`, {
    headers: {
      Cookie: context.req.headers.cookie,
    },
  });
  const list = await res.json();
  return {
    props: {
      list,
    },
  };
}
